---
title: Reading Latin (Part 2)
date: 2012-07-04
techne: :wip
episteme: :speculation
---

This is the second post in a 2-part series about learning to read Latin, or any language, really. See [Part One - Methods and Mindset][Reading Latin (Part 1)] first. This is Part Two - Tools and Examples.

---

How would one learn to read Latin, [systematically][AJATT system]? Well, it only needs to fulfill two requirements.

First, **the rate at which you learn new stuff must be greater than the rate at which you forget old stuff**. If that is not the case, then you're the poor shmuck trying to save the Titanic by being really fast with your single bucket. But if your skill always increases, even if just a little bit, then as long as you keep going, You Will Win. There are no dead-ends for [monontonic functions][monotonic], my friend.

"But", I hear you lament, "maybe it gets really hard at some point! I'm a lazy-ass learner and I hate any effort whatsoever!" My, how honest of you! But don't worry - me too. Keep the effort for the workaholic law school students, we'll be eating pizza and reading Roman poetry instead.

This brings us the other rule: *every single step along the way must be doable*. It must always be easy. *Always*. No "[three easy payments and one fucking complicated one][Mitch payments]".

Fortunately, there are plenty of such systems. Here is mine.

Anki as ratchet.

Grammar as ease guarantee.

You should learn just enough grammar to recognize the general structure of a sentence. Don't bother memorizing any rules or, heavens forbid, conjugation tables, just get the structure.

Noun, verb, modifier, glue.


So what's important?

First, we want to understand the sentence. That's the whole point of this journey after all. Not to brag how large our vocabulary is, or how we know what an ablative is, or how intelligent it would makes us look when we tell our friends we're fluent in Latin. No, *we want to actually read texts*. People forget that, sometimes.





So what kind of cards do you generate? There are three kinds.

The most important card is the "do you know this word?" card. It looks like this:

<%= image("anki_word.jpg", "Anki Word") %>

You are given a sentence with some extended context, and a single word is highlighted. If the sentence is a bit tricky, (e.g. because it contains multiple unknown words), you are also given the full translation. The point is not to get the sentence - only one word.

Do you know what "mensum" means? Yes? Pass. No? Fail.

The answer looks like this:

<%= image("anki_answer.jpg", "Anki Answer") %>

(Yes, this is for a different word. Fuck consistency.)

It contains the full dictionary translation. This is enough for us to figure out what the word means, most of the time. If not, we just delete the card. Eh, it's a target-rich environment and there are thousands of unknown words. Volume matters, individual cards don't.

As your skill grows, you switch more and more to production cards, like this:

<%= image("anki_produce.jpg", "Anki Production") %>

Now you are given the translation of the word, and must produce the Latin word. At first, does cards are rare. They are slower, harder and there's no use doing them before you actually know some words. Of the first 200 or so cards, only 2 are production cards. But as your skill grows, you will transition almost entirely to these cards.

But before you learn

<%= image("anki_sentence.jpg", "Anki Sentence") %>

Don't worry too much

Are these tools user-friendly, well-documented and thoroughly tested? Bwahaha, *hell no*. Do they work? Sure, most of the time.


- LingQ
- LWT
- Yomichan for Japanese



[^installation]:
    Install instructions, for \*nix users. Needs Ruby 1.9 and currently supports Latin, French and Japanese. If it doesn't work, *tough luck*. Read the code, fix it yourself.

    ~~~
    #!sh
    git clone http://github.com/muflax/MCD-card-generator.git mcd
    cd mcd
    bundle install
    bundle exec ruby latin-cards.rb ./txt/bello_gallico.txt
    ~~~

    The first run will take a while because it needs to cache all the translations, both from the dictionary in `./tools/words` and from Google Translate. But those are saved in `*.cache` files, so additional runs take only seconds.

    If you already have some known words you'd like to add, save them as `known/latin/*.txt` or take a look at `anki_to_known.rb` for a script to extract them from your Anki decks.

    Yes, this is all ugly code. I know.
